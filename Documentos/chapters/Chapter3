\newcommand*{\hham}{\hat{\mathcal{H}}}
\chapter*{Implementaci\'on num\'erica del M\'etodo de Rayleigh-Ritz}\label{methodimp}
\addcontentsline{toc}{chapter}{Implementaci\'on num\'erica del M\'etodo de Rayleigh-Ritz}
\markboth{}{} % encabezado
En esta secci\'on explicaremos como es la primera implementaci\'on del m\'etodo para una y dos particulas, se explicar\'an las funciones y variables y su relaci\'on con el modelo te\'orico explicado en la secci\'on \ref{RRMETHOD}.

\section{Introduci\'on}
\label{intro:numerica}
En mec\'anica cu\'antica el estado de una part\'icula est\'a dado por una funcio\'on de onda,
$|\Psi(\vec{r})\rangle$, la cual puede escribirse como combinaci\'on lineal de los autoestados del sistema
$|\psi_n(\vec{r})\rangle$.
Los autoestados son las soluciones de la ecuacio\'on de Schr\"odinger independiente del tiempo

\begin{equation}\label{ec_schrodinger}
\mathcal{H} |\psi_n(\vec{r})\rangle = E_n |\psi_n(\vec{r})\rangle\,,
\end{equation}

\noindent
donde $\mathcal{H}$ es el Hamiltoniano del sistema y $E_n$ es la energ\'ia asociada al n-\'esimo 
autoestado. El operador Hamiltoiano, $\mathcal{H}$, en Ec. \ref{ec_schrodinger} es el operador 
de la energ\'ia del sistema. En un sistema de tres dimensiones, el Hamiltoniano en coordenadas 
esfer\'icas, $(r,\varphi,\theta)$, es

\begin{align}\label{hamiltoniano}
\mathcal{H} &= -\frac{\hbar^2}{2m} \nabla^2 + V(r)\,, \\
            &= -\frac{\hbar^2}{2m} \frac{1}{r^2}\frac{d}{dr}\left(r^2\frac{d}{dr}\right) 
            + \frac{\hbar^2\,l(l+1)}{2m\,r^2} + V(r) \,,
\end{align}

\noindent
donde $V(r)$ es potencial del sistema que solo depende de la coordenada radial, $l$ es el 
momento angular de la part\'icula. Para obtener el Hamiltoniano en la Ec. \ref{hamiltoniano} 
es necesario escribir el operador Laplaciano, $\nabla^2$, en coordenadas esfericas y luego, 
haciendo separacion de variables se obtiene que la dependencia de las funciones $|\phi_n(\vec{r})\rangle$
con las variables $\varphi$ y $\theta$ est\'a dada por las funciones conocidas como 
arm\'onicos esf\'ericos, $Y_{l,m}(\theta,\varphi)$. De esta forma s\'olo hay que 
resolver una ecuaci\'on en la variable radial, $r$, dicha ecuaci\'on es

\begin{equation}\label{ec_radial}
-\frac{\hbar^2}{2m} \frac{1}{r^2}\frac{d}{dr}\left(r^2\frac{dR_n(r)}{dr}\right) 
+ \frac{\hbar^2\,l(l+1)}{2m\,r^2}\,R_n(r) + V(r)\,R_n(r) = E_n\,R_n(r)\,.
\end{equation}

La Ec. \ref{ec_radial} puede simplificarse haciendo la sustituci\'on

\begin{equation}\label{sustitucion}
\phi_n(r) = r\,R_n(r)\,,
\end{equation} 

\noindent
de esta forma la funci\'on $\phi_n(r)$ es soluci\'on de la ecuaci\'on radial 
reducida

\begin{equation}\label{ec_reducida}
-\frac{1}{2} \frac{d^2 \phi_n}{dr^2} + \frac{l(l+1)}{2\,r^2} \phi_n(r) + V(r)\,\phi_n(r) = E_n\,\phi_n(r)\,,
\end{equation}

\noindent
con las condiciones de contorno $\phi_n(r=0)=\phi_n(\infty) = 0$.

La ecuaci\'on radial Ec. \ref{ec_reducida} se resuelve num\'ericamente en un subespacio suponiendo que 
cualquier soluci\'on $\phi_n(r)$ puede ser aproximada por un conjunto finito de funciones. Como se explica en la 
secci\'on \ref{RRMETHOD}, tal subespacio puede ser generado por la base de funciones B-spline, por lo tanto, 
es natural expandir las soluciones en dicha base

\begin{equation}\label{combinacion_lineal}
\phi_n(r) = \sum_{i=1}^{N} \alpha_i\,\varphi_i(r)\,,
\end{equation}

\noindent
donde $\varphi_i(r)$ es el $i$-\'esimo B-spline de orden $k$. Armar la base requiere una secuencia de 
knots que dependan de los siguientes par\'ametros: un conjunto de puntos de malla llamados 
secuencia de breakpoints definidos en $[0,r_{max}]$, el orden $k$ de los polinomios y las condiciones 
de continuidad en cada breakpoint. Todos estos par\'ametros se eligen a partir de las propiedades 
del problema f\'isico.

Para un determinado momento angular $l$, los estados at\'omicos (energ\'ia y funci\'on de onda) 
que satisfacen Ec. \ref{ec_reducida} se calculan resolviendo el sistema de $N$ ecuaciones lineales 
obtenidas al sustituir Ec. \ref{combinacion_lineal} en Ec. \ref{ec_reducida} y proyect\'andose sobre 
$\alpha_i$. Escrito en forma de matriz, este procedimiento es equivalente a resolver el siguiente
sistema de autovalores generalizado

\begin{equation}\label{ec_auval}
H_l \vec{\alpha} = E\,S\,\vec{\alpha}\,,
\end{equation}

\noindent 
para $E$ y $\lbrace\alpha_i\rbrace_1^N$, donde

\begin{align}\label{elemento_matriz}
(H_l)_{ij} &= -\frac{1}{2} \int_0^{r_{max}} \varphi_i(r) \frac{d^2}{dr^2}\varphi_j(r) \,dr \nonumber
           + \frac{l(l+1)}{2}\int_0^{r_{max}} \frac{\varphi_i(r) \,\varphi_j(r)}{r^2} \,dr \\
           & + \int_0^{r_{max}} \varphi_i(r)\,V(r)\,\varphi_j(r)\, dr \\
(S)_{ij} &= \int_0^{r_{max}} \varphi_i(r)\,\varphi_j(r)\,dr \label{solapamiento}
\end{align}

La matriz de solapamiento $S$ se origina del hecho de que los B-splines no forman
un conjunto ortonormal de funciones base. Todos los elementos de las distintas matrices
en las ecuaciones \ref{elemento_matriz} se calculan num\'ericamente usando una cuadratura de {\it Gauss Lengedre} (GL). Si se consideran $n$ puntos
para evaluar la cuadratura (tambi\'en conocida como cuadratura de orden $n$), es posible 
calcular en forma exacta integrales de polinomios de grado menor o igual a $2n-1$ en 
un intervalo cerrado. Puesto que un B-spline de orden k es un polinomio particular de grado 
$k-1$ en cada segmento, se ve f\'acilmente que los integrandos del elemento $(S)_{ij}$ y el 
primer t\'ermino de la matriz $H_l$ son polinomios con m\'aximo grado $2k-2$. 
La aplicaci\'on del procedimiento GL en cada segmento conduce a una evaluaci\'on num\'erica exacta de estas dos integrales. El caso de la energ\'ia cin\'etica angular y el t\'ermino del potencial, segundo y tercer t\'erminos de $H_l$ en Ec. \ref{elemento_matriz} respectivamente son ligeramente diferentes. Aqu\'i el integrando ya no es un polinomio de alg\'un grado sino m\'as bien una fracci\'on racional y la afirmaci\'on anterior no es v\'alida. Sin embargo, se puede demostrar que un peque\~no incremento en el n\'umero de puntos de la cuadratura da como resultado una convergencia inmediata a la precisi\'on del punto flotante de la computadora. Por lo tanto, todos los elementos de la matriz se calculan de esta forma.

Otra propiedad clave directamente relacionada con el uso de la base B-spline deriva del hecho de que los B-splines son funciones compactas: un B-spline de orden $k$ difiere de cero solamente en $k$ segmentos sucesivos. Por lo tanto, cualquier operador local expresado en la base B-spline aparece como una matriz que tiene valores distintos de cero en una banda diagonal de ancho $2k-1$. Adem\'as el Hamiltoniano, as\'i como la matriz de superposici\'on son matrices sim\'etricas. Resulta as\'i que para un dado $k$, en vez de $N^2$ elementos de matriz s\'olo se necesitan calcular y almacenar $Nk$ elementos en la memoria.

Resolver el sistema ahora es sencillo si se tiene en cuenta el hecho de que la matriz de superposici\'on 
(o solapamiento) $S$ es definida positiva. El sistema generalizado de banda sim\'etrica se puede 
transformar entonces en un sistema regular con la misma estructura de banda. Una diagonalizaci\'on 
directa del nuevo sistema proporciona todas los autovalores (que ser\'ian las autoenerg\'ias), 
pero este procedimiento no es capaz de recuperar las funciones propias correspondientes ya 
que la matriz de transformaci\'on (matriz $N^2$ completa) ha sido eliminada. Teniendo todos 
los valores propios, los vectores propios se calculan uno por uno en un segundo paso por 
iteraci\'on inversa cuando sea necesario. Este procedimiento nunca requiere m\'as que tres 
iteraciones para un error relativo del orden la precisi\'on de la m\'aquina.

\subsection{Sistema de dos part\'iculas}

Para considerar un sistema de dos part\'iculas es necesario escribir un operador 
Hamiltoniano que act\'ue sobre las variables de ambas part\'iculas, en este caso, 
el operador es

\begin{equation}\label{hamiltoniano2p}
\mathcal{H}_{2p} = \mathcal{H}_{1p}^{(1)} + \mathcal{H}_{1p}^{(2)} + U(\vec{r}_1,\vec{r}_2)\,,
\end{equation}

\noindent donde $\mathcal{H}_{1p}^{(i)}$ es el operador Hamiltoniano que act\'ua sobre 
la part\'icula $i$ ($i = 1, 2$) dado en la ecuaci\'on \ref{hamiltoniano} y $U(\vec{r}_1,\vec{r}_2)$
es el operador que representa la interacci\'on entre las part\'iculas y en general es una 
funci\'on que depende del m\'odulo de la diferencia entre $\vec{r}_1$ y $\vec{r}_2$, en otras 
palabras s\'olo depende de la distancia entre las part\'iculas, es decir
$U(\vec{r}_1,\vec{r}_2) = U(|\vec{r}_1-\vec{r}_2|)$.

Para este sistema, la equaci\'on diferencial que se tiene que resolver es

\begin{equation}\label{eq:scho-2p}
\mathcal{H}_{2p} \psi_n(\vec{r}_1,\vec{r}_2) = E_n^{2p} \psi_n(\vec{r}_1,\vec{r}_2)\,,
\end{equation}

\noindent donde $\psi_n(r_1,r_2)$ es la funci\'on de onda del sistema de dos part\'iculas. 
En particular, como las part\'iculas son cu\'anticas, la funci\'on de onda tiene que 
satisfacer condiciones de simetr\'ia (adem\'as de las condiciones de contorno). Estas 
condiciones de contorno pueden ser que la funci\'on de onda sea sim\'etrica al 
intercambio de coordenada, $\psi(\vec{r}_2,\vec{r}_1) = \psi(\vec{r}_1,\vec{r}_2)$, o bien
antisim\'etrica al intercambio de coordenadas, $\psi(\vec{r}_2,\vec{r}_1) = -\psi(\vec{r}_1,\vec{r}_2)$.

Para el resolver el problema usando el m\'etodo variacional de Rayleigh-Ritz
es necesario elegir una base de funciones para el c\'alculo de las matrices y pasar 
de una ecuaci\'on diferencial a una ecuaci\'on de autovalores y autovectores, y es 
recomendable que dicho conjunto de funciones cumpla con las condiciones de 
simetr\'ia del problema, como estamos interesados en el caso de 
funciones de onda sim\'etricas elegimos como base una combinaci\'on de 
B-splines que sean sim\'etricas

\begin{equation}\label{base-2p}
\chi_{i,j}(r_1,r_2) = \left\lbrace \begin{array}{ccc}
                      \varphi_i(r_1)\,\varphi_j(r_2) & \mbox{si} & i=j \\
                      \frac{\varphi_i(r_1)\,\varphi_j(r_2)+\varphi_i(r_2)\,\varphi_j(r_1)}{\sqrt{2}} & \mbox{si} & i\neq j
                      \end{array} \right.\,,
\end{equation}

\noindent donde $\varphi_i(r)$ es el i-\'esimo B-spline de orden $k$.
Las funciones definidas en Ec. \ref{base-2p} cumple con la condici\'on de 
simetr\'ia $\chi_{i,j}(r_2,r_1) = \chi_{i,j}(r_1,r_2)$ para todo par de valores $i,j$. 
Para el c\'alculo de las matrices involucradas es mas simple, primero 
calcular dichas matrices usando la base 

\begin{equation}\label{base-2p-2}
\hat{\chi}_{i,j}(r_1,r_2) = \varphi_i(r_1)\,\varphi_j(r_2)\,,
\end{equation}

\noindent y luego hacer el cambio de variable a la base sim\'etrica de la EC \ref{base-2p}.
En esta base la matriz del operador Hamiltoniano queda

\begin{equation}\label{mat-hamiltoniano-2p}
\begin{split}
H_{i,i';j,j'} &= \langle \hat{\chi}_{i,j} |\mathcal{H}_{2p}|\hat{\chi}_{i',j'}\rangle \\
              &= (H_l)_{i,i'}\,S_{j,j'} + S_{i,i'}\,(H_l)_{j,j'} + U_{i,i';j,j'}\,,
\end{split}
\end{equation}

\noindent donde las matrices $(H_l)$ y $S$ estan dadas por las integrales en 
la EC \ref{elemento_matriz}, mientras que la matriz de la interaci\'on entre 
las part\'iculas est\'a dada por

\begin{equation}\label{matriz_interaccion}
\begin{split}
U_{i,i';j,j'} &= \langle \chi_{i,j} |U(r_1,r_2)|\chi_{i',j'}\rangle \\
              &=  \int_0^{r_{max}} \left(\int_0^{r_{max}} \varphi_i(r_1)\, \varphi_j(r_2)\,
                  U(r_1,r_2)\, \varphi_{i'}(r_1)\, \varphi_{j'}(r_2)\, dr_2\right)\, dr_1\,.
\end{split}
\end{equation}

\noindent En general, la interacci\'on entre las part\'iculas es una funci\'on que depende
de la distancia entre las mismas, $|\vec{r}_1-\vec{r}_2|$, por lo tanto el c\'alculo 
de la integral en Ec. \ref{matriz_interaccion} puede ser bastante complicado. Una forma
de calcular dichas integrales y que adem\'as se puede aplicar a un gran n\'umero de 
problemas es separar el integrando sobre la variable $r_2$ en dos, es decir, podemos 
definir las funciones

\begin{equation}
\begin{split}\label{iteraccion_factoreo}
f_{j,j'}(r_1) &= \int_0^{r_1} \varphi_j(r_2)\,U(r_1,r_2)\,\varphi_{j'}(r_2)\,dr_2 \,, \\
g_{j,j'}(r_1) &= \int_{r_1}^{r_{max}} \varphi_j(r_2)\,U(r_1,r_2)\,\varphi_{j'}(r_2)\,dr_2 \,,
\end{split}
\end{equation}

\noindent las cuales son integrales de una sola variable y por lo tanto pueden ser 
calculadas aplicando el mismo m\'etodo que se usa para las dem\'as matrices. Luego, 
para evaluar los elementos de matriz de $U(r_1,r_2)$ hay que calcular una nueva 
integral, que es de la forma

\begin{equation}\label{matriz_interaccion-2}
U_{i,i';j,j'} = \int_0^{r_{max}} \varphi_i(r_1)\,f_{j,j'}(r_1)\,\varphi_{i'}(r_1)\,dr_1 + 
                \int_0^{r_{max}} \varphi_i(r_1)\,g_{j,j'}(r_1)\,\varphi_{i'}(r_1)\,dr_1\,.
\end{equation}

\section{Implementaci\'on n\'umerica}
Este m\'etodo, tanto para una part\'icula como para dos, tiene dos partes bien diferenciadas una es construir el sistema representado en las EC \ref{ec_auval} o \ref{eq:scho-2p} y la otra parte es resolver dicho sistema. Para la resoluci\'on del sistema se utilizaron bibliotecas de terceros \cite{LAPACK, ARPACK} y para armar el sistema hay que calcular las matrices involucradas, este c\'alculo est\'a expresado en las f\'ormulas \ref{elemento_matriz} y \ref{mat-hamiltoniano-2p} para para una y dos part\'iculas respectivamente, las itegrales relacionadas se aproximaron con el m\'etodo {\it Gauss Legendre}.

Llamemos $v_0$ al tercer t\'ermino de la derecha la Ec. \ref{elemento_matriz} y $ke$ los dos primeros t\'erminos de \ref{elemento_matriz} y $s$ representa la matriz {\it S} en \ref{solapamiento}.
Llamaremos $INT\_G$ el grado de cuadratura, $L\_INT$ la cantidad de intervalos, este par\'ametro define el tama\~no y por tanto la presici\'on del c\'alculo.

\subsection{Primera implementaci\'on para una part\'icula}\label{una_particula}
Para el armado de las matrices se puden diferenciar dos procesos o {\it bloques} secuenciales, el primero realiza un c\'alculo auxiliar y el segundo calcula las matrices de la Ec. \ref{elemento_matriz} y \ref{solapamiento} con {\it Cuadratura Gaussiana}.

En el primer bloque (ver algoritmo \ref{alg:knot_pesos}) se calcula: los knots de los B-splines con una distribuci\'on uniforme (ver lineas \ref{knot_pesos:breakpoints:ini} hasta \ref{knot_pesos:breakpoints:fin}), las abscisas y pesos de la cuadratura de {\it Gauss-Legendre} para cada {\it punto de integraci\'on}, estos puntos son $L\_INT$ intervalos tomados uniformemente entre los l\'imites $r_{min}$ y $r_{max}$ de las integrales de la Ec. \ref{elemento_matriz} (ver lineas \ref{gaus:legendre_abs:ini} hasta \ref{gaus:legendre_abs:fin}).

\begin{algorithm}[!htb]
 \label{alg:knot_pesos}
 %\KwData{this text}
 \KwResult{C\'alculo auxiliar $x$, $w$, $t$ y $k$}
 $dr = \frac{(r_{max} - r_{min})}{L\_INT}$\\
 $nk = L\_INT+2*KORD-1$\\
 \For{$i$ $\in$ $[0, $L\_INT$)$}{ \label{gaus:legendre_abs:ini}
    $ri = r_{min} + i * dr$\\
    $rf$ = $ri + dr$\\
    $x[i] = absisas\ del\ m\acute{e}todo\ de\ gauss-legendre\ en\ el\ intervalo\ [ri, rf]$\\
    $w[i] = pesos\ del\ m\acute{e}todo\ de\ gauss-legendre\ en\ el\ intervalo\ [ri, rf]$\\
 }\label{gaus:legendre_abs:fin}
 $t[0] = r_{min}$\\ \label{knot_pesos:breakpoints:ini}
 $k[0] = 0$\\
 \For{$i$ $\in$ $[1, KORD-1]$}{
    $t[i] = t[i-1]$\\
    $k[i] = k[i-1]$\\
 }

 \For{$i$ $\in$ $[KORD,KORD+L\_INT]$}{
    $t[i] = t[i-1] + dr$\\
    $k[i] = k[i-1] + 1$\\
 }

 \For{$i$ $\in$ $[KORD+L\_INT,nk]$}{
    $t[i] = t[i-1]$\\
    $k[i] = k[i-1]$\\
 }\label{knot_pesos:breakpoints:fin}
 
 \caption{C\'alculo auxiliar}
\end{algorithm}

En el segundo bloque (ver algoritmo \ref{alg:calculomatrices}) se calculan las matrices de solapamiento $s$, la matriz de potencial $v_e$ y la matriz de energ\'ia $ke$. Las integrales de cada punto de la matriz se 
realizan con la cuadratura de {\it Gauss-Legendre} sobre B-splines, esto se puede ver en las lineas 
\ref{calculomatrices:b-spline_integal:ini} hasta \ref{calculomatrices:b-spline_integal:fin}, notar que en la linea \ref{b-spline_eval} calculamos el valor de la funci\'on en ese punto (las dependencias del mismo se dan en el \'indice son $j$ e $i$) y luego realizamos la operaci\'on con los pesos correspondiente a cada parte de la matriz, cada valor de B-spline tiene un cierto peso dado por la cuadratura seg\'un la posici\'on de la matriz.

Luego se integra de la misma manera con las dervidas de los B-splines (lineas \ref{calculomatrices:db-spline_integal:ini} hasta 
\ref{calculomatrices:db-spline_integal:fin}) como esta escrito en la Ec. \ref{elemento_matriz}. Notar que la evaluaci\'on de los B-splines (o m\'as bien sus derivadas) son calculados dentro del ciclo que realiza la integracion por {\it Gauss-Legendre} por tanto esa funci\'on es evaluada m\'as de una vez, mas adelante veremos como optimizamos esto con una factorizaci\'on de c\'odigo.

\begin{algorithm}[!htb]
 \label{alg:calculomatrices}
 %\KwData{this text}
 \KwResult{C\'alculo de las matrices $s$, $v_0$ y $ke$ }
 $nb = L\_INT + KORD - 3$  \Comment{tama\~no de la base} \\
 $ma = 0.5*lmax*(lmax+1)$ \Comment{{\it lmax} es el momento angular} \\
 \For{$i$ $\in$ $[KORD-1, KORD+L\_INT-1)$}{\label{calculomatrices:b-spline_integal:ini}
    \For{$j$ $\in$ $[0, INT\_G)$}{

      $rr = x[k[i], j]$\\
      $sp$ = evaluar los b-splines en el punto $rr$\\ \label{b-spline_eval}

      \For{$m$ $\in$ $[0, KORD)$}{
        $im = i - KORD + m$\\
        \If{$0 \le im < nb$}{
          \For{$n$ $\in$ $[0, KORD-1]$}{
            $in = i - KORD + n$\\
            \If{$0 \le in < nb$}{
              $s_{ij}$ += sp[m] * sp[n] * w[k[i], j]\\
              $ke_{ij}$ += $\frac {ma * sp[m] * sp[n] * w[k[i], j]} {rr*rr} $\\
              \If{$r_{min} < rr < r_{max}$}{
                $v_{0i,j}$ += sp[m] * sp[n] * w[k[i], j]\\
              }
            }
          }
        }
      }
    }
 }\label{calculomatrices:b-spline_integal:fin}
 \For{$i$ $\in$ $[0, KORD+L\_INT-1)$}{\label{calculomatrices:db-spline_integal:ini}
  \For{$m$ $\in$ $[i - KORD + 1, i]$}{
    \If{$0 \le m < nb$}{
      \For{$n$ $\in$ $[m, i]$}{
        \If{$0 \le n < nb$}{
          \For{$j$ $\in$ $[0, INT\_G)$}{
            $rr = x[k[i], j]$\\
            $bm = derivada\ del\ b-spline\ en\ el\ punto\ rr\ en\ el\ \acute{i}ndice\ m$\\
            $bn = derivada\ del\ b-spline\ en\ el\ punto\ rr\ en\ el\ \acute{i}ndice\ n$\\
            $ke_{ij}$ += $\frac {0.5 * w[k[i], j] * bm * bn} {me} $ 
            \Comment{{\it me} es la masa de la part\'icula}\\
            
          }
        }
      }
    }
  }\label{calculomatrices:db-spline_integal:fin}
 }
 \caption{C\'alculo de matrices}
\end{algorithm}

\subsection{Primera implementaci\'on para dos part\'iculas}
\label{imp2particulas}

El armado de las matrices para dos part\'iculas se puede ver en tres partes ({\it o bloques}): la primera es calcular las matrices $(H_l)$ y $S$ del problema de una part\'icula como fu\'e descripto m\'as arriba, la segunda es calcular la interacci\'on $U_{i,i';j,j'}$ y luego armar las matrices en una base simetrica seg\'un Ec. \ref{base-2p}.

La Interacci\'on ({\it segunda parte}) se describe en el algoritmo \ref{alg:interaccion}. 
En esta rutina se realiza el c\'alculo del tensor de la Ec. \ref{matriz_interaccion}, integrando con {\it Gauss-Legendre}, el tensor $U_{i,i';j,j'}$ es calculado parcialmente en cada vuelta del ciclo de la linea \ref{ciclo_integracion_vef}, entonces s\'olo se le calculan las funciones $f^{i,i'}_{j,j'}$ y $g^{i,i'}_{j,j'}$ del ciclo $i,i'$ (ver Ec. \ref{iteraccion_factoreo}), como estas funciones son computadas con el m\'etodo de {\it Gauss-Lengre} en las lineas \ref{calculo_U:ini} hasta \ref{calculo_U:fin} se realiza un efoque similar al explicado en la secci\'on \ref{una_particula} s\'olo hay que tener cuidado con los limites de integraci\'on. Luego se realiza el resto de la integraci\'on en las lineas \ref{seungda_integracion:ini} hasta \ref{seungda_integracion:fin} con el m\'etodo de {\it Gauss-Legendre} tomando como funci\'on $U_{i,i'} = \sqrt{s_{i,i} * s_{i',i'}}$.

\begin{algorithm}[!htb]
 \label{alg:interaccion}
 \KwResult{C\'alculo de la interacci\'on $Vef$}
 
 $Vef = 0$ \Comment{Tensor de dimensi\'on $N^4$, que representa $H_{i,i';j,j'}$}
 $nb = L\_INT + KORD - 3$  \Comment{tama\~no de la base} \\
 \For{$i$ $\in$ $[KORD-1, KORD+L\_INT-1)$}{
    \For{$abs$ $\in$ $[0, INT\_G)$}{\label{ciclo_integracion_vef}
      $rr_1 = x[k[i], abs]$\\
      $w_1 = w[k[i], abs]$\\
      $f = 0$ \Comment{Matriz $N^2$}\\
      $g = 0$ \Comment{Matriz $N^2$}\\
      
      \For{$i^{\prime}$ $\in$ $[KORD-1, KORD+L\_INT-1)$}{\label{calculo_U:ini}
        \For{$abc'$ $\in$ $[0, INT\_G)$}{
          $rr_2 = x[k[i^{\prime}], abc']$\\
          $w_2 = w[k[i], abs']$\\
          $sp$ = evaluar los b-splines en el punto $rr_2$\\
          \For{$m$ $\in$ $[0, KORD)$}{
            $j = i^{\prime} - KORD + m$\\
            \If{$0 \le j < nb$}{
              \For{$n$ $\in$ $[0, KORD)$}{
                $j' = i^{\prime} - KORD + n$\\
                \If{$0 \le j' < nb$}{
                  \uIf{$rr_2 \le rr_1$}{
                    $f_{j, j'}$ += $sp[m] * sp[n] * w_2 / rr_1$\\
                  }\Else{
                    $g_{j, j'}$ += $sp[m] * sp[n] * w_2 / rr_2$\\
                  }
                }
              }
            }
          }
        }
      }\label{calculo_U:fin}
      $sp$ = evaluar los b-splines en el punto $rr_1$\\
      \For{$m$ $\in$ $[0, KORD)$}{\label{seungda_integracion:ini}
        $im = i^{\prime} - KORD + m$\\
        \If{$0 \le im < nb$}{
          \For{$m^{\prime}$ $\in$ $[1, KORD)$}{
            $im^{\prime} = i - KORD + m^{\prime} - 1$\\
            \If{$0 \le im^{\prime} < nb$}{
              \For{$j$ $\in$ $[1, nb)$}{
                \For{$j'$ $\in$ $[1, nb)$}{
                  $Vef_{im,im';\ j,j'}\ += \frac {sp[m]*sp[m^{\prime}]*w_1*(f_{j, j'} + g_{j, j'})}{\sqrt{s_{j,j}*s_{j',j'}}}$\\
                }
              }
            }
          }
        }
      }\label{seungda_integracion:fin}
    }
  }
 \caption{Interacci\'on}
\end{algorithm}

La tercera parte se trata de construir el {\it Hamiltoniano} y la matriz de {\it Solapamiento}, para esto se utiliza la una nueva base explicada en \ref{base-2p}. Entonces si ya se tienen calculado $U$ y $S$ (matriz de solapamiento para una p\'articula) luego resta realizar el c\'alculo descripto en \ref{mat-hamiltoniano-2p} variando los puntos $\eta$, este c\'alculo es descripto en el algoritmo \ref{alg:sener}. Las condicionales que est\'an en las lineas \ref{cond1}, \ref{cond2}, \ref{cond3} y \ref{cond4} indican como debe ser calculada la base que fue explicada en \ref{base-2p} seg\'un el caso.


\begin{algorithm}[!htb]
 \label{alg:sener}
 \KwData{$s$, $v_0$, $ke$, $Vef$}
 \KwResult{C\'alculo de la simetrizaci\'on, $hsim_{eta}$, $ms_{eta}$}

 $nb = L\_INT + KORD - 3$  \Comment{tama\~no de la base} \\
 $mh = ke - v_0$\\

 $i = 0$\\
 \For{$\eta$ $\in$ $puntos\ \eta$}{
    $hsim = 0$\\
    $ms = 0$\\
    \For{$n$ $\in$ $[0, nb)$}{
        \For{$m$ $\in$ $[n, nb)$}{
            $j = 0$\\
            \For{$n'$ $\in$ $[0, nb)$}{
                \For{$m'$ $\in$ $[n', nb)$}{
                    \uIf{$m = n\ \textbf{and}\ m' = n'$}{ \label{cond1}
                        $hsim_{i,j} = 2*s_{n,n'}*mh_{n,n'} + \eta*Vef_{n,n:n',n'}$\\
                        $ms{i,j} = s_{n,n'} * s{n,n'}$\\
                    }\uElseIf{$m \neq n\ \textbf{and}\ m'= n'$}{ \label{cond2}
                        $hsim_{i,j} = \frac{1}{\sqrt{2}}*(2*s_{m, n'}*mh_{n,n'} + 2*s_{n,n'}*mh_{m,m'} + \eta*Vef_{m,n:n',n'} + \eta*Vef_{n,m:n',n'})$\\
                        $ms_{i,j} = 2*\frac{1}{\sqrt{2}}*s_{n,n'}*s{m,n'}$\\
                    }\uElseIf{$m = n\ \textbf{and}\ n' \neq m'$}{ \label{cond3}
                        $hsim_{i,j} = \frac{1}{\sqrt{2}} * (2*s_{n,m'}*mh_{n,n'} + 2*s_{n,n'}*mh_{n,m'} + \eta * Vef_{n,n:n',m'} + \eta * Vef_{n,n:m',n'})$\\
                        $ms_{i,j} = 2*\frac{1}{\sqrt{2}}*s_{n,n'}*s_{n,m'}$\\
                    }\Else{ \label{cond4}
                        $hsim_{i,j} = s_{n,n'}*mh_{m,m'} + s_{n,m'}*mh_{m,n'} +$\\
                                      $s_{m,m'}* mh_{n,n'} + s_{m,n'}*mh_{n,m'}+$\\
                                      $\eta * 0.5 * (Vef_{n,m:n',m'} + Vef_{m,n:n',m'} + Vef_{n,m:m',n'}, Vef_{m,n:m',n'})$\\
                        $ms_{i,j} = s_{n,n'} * s_{m,m'} + s_{n,m'} + s_{m,n'}$\\
                    }
                    $j = j + 1$\\
                }
            }
            $i = i + 1$
        }
    }
    $guardar\ sistema(hsim, ms)$
 }
 \caption{Simetrizaci\'on}
\end{algorithm}